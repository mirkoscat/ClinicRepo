// <auto-generated />
using System;
using DataLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataLayer.Migrations
{
    [DbContext(typeof(DataDbContext))]
    [Migration("20230523085006_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ClinicAnimalClinicVisit", b =>
                {
                    b.Property<int>("ClinicAnimalsId")
                        .HasColumnType("int");

                    b.Property<int>("ClinicVisitsId")
                        .HasColumnType("int");

                    b.HasKey("ClinicAnimalsId", "ClinicVisitsId");

                    b.HasIndex("ClinicVisitsId");

                    b.ToTable("ClinicAnimalClinicVisit");
                });

            modelBuilder.Entity("DataLayer.Animal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CoatColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("HasMicrochip")
                        .HasColumnType("bit");

                    b.Property<string>("MicrochipNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Typology")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Animals");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("DataLayer.ClinicVisit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DescriptionBeforeVisit")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("ExamTypology")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TreatmentDescription")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("VisitDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ClinicVisits");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("MunicipalAnimalMunicipalVisit", b =>
                {
                    b.Property<int>("MunicipalAnimalsId")
                        .HasColumnType("int");

                    b.Property<int>("MunicipalVisitsId")
                        .HasColumnType("int");

                    b.HasKey("MunicipalAnimalsId", "MunicipalVisitsId");

                    b.HasIndex("MunicipalVisitsId");

                    b.ToTable("MunicipalAnimalMunicipalVisit");
                });

            modelBuilder.Entity("DataLayer.ClinicAnimal", b =>
                {
                    b.HasBaseType("DataLayer.Animal");

                    b.Property<string>("OwnerLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("ClinicAnimal", (string)null);
                });

            modelBuilder.Entity("DataLayer.MunicipalAnimal", b =>
                {
                    b.HasBaseType("DataLayer.Animal");

                    b.Property<bool>("IsInHospital")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Picture")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("RecoveryEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RecoveryStart")
                        .HasColumnType("datetime2");

                    b.ToTable("MunicipalAnimal", (string)null);
                });

            modelBuilder.Entity("DataLayer.MunicipalVisit", b =>
                {
                    b.HasBaseType("DataLayer.ClinicVisit");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.ToTable("MunicipalVisit", (string)null);
                });

            modelBuilder.Entity("ClinicAnimalClinicVisit", b =>
                {
                    b.HasOne("DataLayer.ClinicAnimal", null)
                        .WithMany()
                        .HasForeignKey("ClinicAnimalsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.ClinicVisit", null)
                        .WithMany()
                        .HasForeignKey("ClinicVisitsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MunicipalAnimalMunicipalVisit", b =>
                {
                    b.HasOne("DataLayer.MunicipalAnimal", null)
                        .WithMany()
                        .HasForeignKey("MunicipalAnimalsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.MunicipalVisit", null)
                        .WithMany()
                        .HasForeignKey("MunicipalVisitsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataLayer.ClinicAnimal", b =>
                {
                    b.HasOne("DataLayer.Animal", null)
                        .WithOne()
                        .HasForeignKey("DataLayer.ClinicAnimal", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataLayer.MunicipalAnimal", b =>
                {
                    b.HasOne("DataLayer.Animal", null)
                        .WithOne()
                        .HasForeignKey("DataLayer.MunicipalAnimal", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataLayer.MunicipalVisit", b =>
                {
                    b.HasOne("DataLayer.ClinicVisit", null)
                        .WithOne()
                        .HasForeignKey("DataLayer.MunicipalVisit", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
